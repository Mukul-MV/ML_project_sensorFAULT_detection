name: workflow

on: 
  push:
    branches:
      - main  #trigger wheneer we push main branch

permissions:
  id-token: write
  contents: read

#using git action we are going to create docker image and saving it to ECR
jobs:
 build-and-push-ecr-image:
  name: Continuous Delivery
  runs-on: ubuntu-latest #machine for github 
  steps:
   - name: Checkout Code  #checkout means to bring github code to ubuntu machine 
     uses: actions/checkout@v3
   - name: Install Utilities  #uppdate ubountu 
     run: |
      sudo apt-get update  
      sudo apt-get install -y jq unzip 
#sudo apt-get install -y jq unzip: This command installs two packages: jq and unzip.
#jq is a command-line tool for processing JSON data. 
#It's used to parse and manipulate JSON data in shell scripts.
#unzip is a utility for extracting files from ZIP archives.

#This step updates the package list, installs the jq and unzip packages, 
#and the -y flag in apt-get install means that the installation should 
#proceed without requiring confirmation.

#You're then expected to type 'Y' (for "Yes") and press Enter to confirm the installation.

   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v1
     with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}

   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1
    
   - name: Build, tag, and push image to Amazon ECR
     id: build-image
     env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
      IMAGE_TAG: latest
     run: |
       # Build a docker container and
       # push it to ECR so that it can
       # be deployed to ECS.
       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 


 Continuous-Deployment:
  needs: build-and-push-ecr-image
  runs-on: self-hosted
  steps:
  - name: Checkout
    uses: actions/checkout@v3
  
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}
  - name: Install Utilities
    run: |
      sudo apt-get update
      sudo apt-get install -y jq unzip
  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v1
    
  - name: Pull docker image
    run: |
      docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
  - name: Run Docker Image to serve users
    run: |
      export IMAGE_NAME="${{secrets.AWS_ECR_LOGIN_URI}}"/"${{ secrets.ECR_REPOSITORY_NAME }}":
      latest AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" AWS_SECRET_ACCESS_KEY=
      "${{ secrets.AWS_SECRET_ACCESS_KEY }}" AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
      BUCKET_NAME=${{ secrets.BUCKET_NAME }} "MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}" && docker compose up -d
  - name: Docker System Prune to Remove Old Images
    run: |
      docker system prune -f



      



